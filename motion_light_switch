blueprint:
  name: Motion Light Switch (with daylight & self-healing timeout)
  description: |
    Turns lights on when motion is detected and off when no motion after delay.
    Adds optional daylight sensor (skip lighting if bright) and a self-healing
    timeout that turns lights off if they remain on for too long with no motion.
  domain: automation
  input:
    motion_sensor:
      name: Motion Sensor(s)
      selector:
        entity:
          domain: binary_sensor
          multiple: true
    target_lights:
      name: Lights to Control
      selector:
        target:
          entity:
            domain: light
    no_motion_wait:
      name: Delay before turning off (seconds)
      default: 60
      selector:
        number:
          min: 10
          max: 600
          unit_of_measurement: seconds
          mode: slider
    night_mode:
      name: Night Mode Boolean (optional)
      default: input_boolean.night_mode
      selector:
        entity:
          domain: input_boolean
          multiple: false
    daylight_sensor:
      name: Daylight Sensor (optional)
      description: Prevents lights from turning on if daylight is detected (state == 'on')
      default: binary_sensor.daylight
      selector:
        entity:
          domain: binary_sensor
          multiple: false
    daylight_block_enabled:
      name: Skip light-on if daylight is active
      default: true
      selector:
        boolean: {}
    brightness_day:
      name: Brightness when not in night mode
      default: 255
      selector:
        number:
          min: 1
          max: 255
    brightness_night:
      name: Brightness when in night mode
      default: 60
      selector:
        number:
          min: 1
          max: 255
    light_on_timeout:
      name: Light-on Timeout (minutes)
      description: Maximum time a light can stay on before itâ€™s re-evaluated for shutdown.
      default: 5
      selector:
        number:
          min: 1
          max: 60
          unit_of_measurement: minutes
          mode: slider

mode: restart

variables:
  daylight_sensor: !input daylight_sensor
  daylight_block_enabled: !input daylight_block_enabled
  motion_sensors: !input motion_sensor
  target_lights: !input target_lights

trigger:
  # Motion ON/OFF triggers
  - platform: state
    entity_id: !input motion_sensor
    to: 'on'
  - platform: state
    entity_id: !input motion_sensor
    to: 'off'
    for:
      seconds: !input no_motion_wait

  # Self-healing timeout trigger
  - platform: template
    value_template: >
      {% set lights = expand(target_lights.entity_id | default([])) %}
      {% for light in lights %}
        {% if states(light.entity_id) == 'on'
          and (as_timestamp(now()) - as_timestamp(light.last_changed)) > (!input light_on_timeout * 60) %}
          {{ true }}
        {% endif %}
      {% endfor %}
      false

action:
  - choose:
      # --- Motion detected ---
      - conditions:
          - condition: state
            entity_id: !input motion_sensor
            state: 'on'
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not daylight_sensor }}"
              - condition: template
                value_template: "{{ not daylight_block_enabled }}"
              - condition: template
                value_template: >
                  {{ daylight_sensor and states(daylight_sensor) in ['off', 'unknown', 'unavailable'] }}
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: !input night_mode
                    state: 'on'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: !input brightness_night
                    target: !input target_lights
              - conditions:
                  - condition: state
                    entity_id: !input night_mode
                    state: 'off'
                sequence:
                  - service: light.turn_on
                    data:
                      brightness: !input brightness_day
                    target: !input target_lights

      # --- Motion cleared ---
      - conditions:
          - condition: state
            entity_id: !input motion_sensor
            state: 'off'
        sequence:
          - service: light.turn_off
            target: !input target_lights

      # --- Light-on timeout reached ---
      - conditions:
          - condition: template
            value_template: >
              {% set lights = expand(target_lights.entity_id | default([])) %}
              {{ lights | selectattr('state','eq','on') | list | count > 0 }}
          - condition: template
            value_template: >
              {% set motions = expand(motion_sensors | default([])) | selectattr('state','eq','on') | list %}
              {{ motions | count == 0 }}
        sequence:
          - service: light.turn_off
            target: !input target_lights
